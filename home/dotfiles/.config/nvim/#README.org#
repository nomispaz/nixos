* General options
** Set leader key
#+BEGIN_SRC lua :tangle ~/.config/nvim/init.lua
vim.g.mapleader = " "
vim.g.maplocalleader = " "
vim.keymap.set({"n","v"}, "<Space>", "<Nop>", { silent = true })
#+END_SRC
** Set options
#+BEGIN_SRC lua :tangle ~/.config/nvim/init.lua
local opt = vim.opt

vim.g.autoformat = true

opt.clipboard = "unnamedplus" -- Sync with system clipboard
opt.confirm = true -- Confirm to save changes before exiting modified buffer
opt.cursorline = false -- highlighting of the current line
--opt.expandtab = true -- Use spaces instead of tabs
opt.ignorecase = true -- Ignore case
opt.inccommand = "nosplit" -- preview incremental substitute
opt.laststatus = 3 -- global statusline
opt.mouse = "a" -- Enable mouse mode
opt.number = true -- Print line number
vim.wo.relativenumber = true
opt.scrolloff = 4 -- Lines of context
opt.shiftround = true -- Round indent
--opt.shiftwidth = 4 -- Size of an indent
opt.showmode = false -- Dont show mode since we have a statusline
opt.smartcase = true -- Don't ignore case with capitals
opt.smartindent = true -- Insert indents automatically
opt.spelllang = { "en" }
opt.splitbelow = true -- Put new windows below current
opt.splitkeep = "screen"
opt.splitright = true -- Put new windows right of current
opt.timeoutlen = 300
opt.undofile = true
opt.undolevels = 10000
opt.wildmode = "longest:full,full" -- Command-line completion mode
opt.wrap = true -- line wrap
opt.conceallevel = 2 --conceal links
opt.concealcursor = 'nc'
opt.completeopt = {'menu', 'menuone', 'noselect'} --autocomplete selection
#+END_SRC
* Load modules
#+BEGIN_SRC lua :tangle ~/.config/nvim/init.lua
require("config.autocommands")
require("config.functions")
require("config.keymaps")
#+END_SRC
* Lazy plugin manager
** Install plugin manager
#+begin_src lua :tangle ~/.config/nvim/init.lua
  require("config.lazy")
#+end_src

#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/config/lazy.lua
-- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not (vim.uv or vim.loop).fs_stat(lazypath) then
  local lazyrepo = "https://github.com/folke/lazy.nvim.git"
  local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
  if vim.v.shell_error ~= 0 then
    vim.api.nvim_echo({
      { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
      { out, "WarningMsg" },
      { "\nPress any key to exit..." },
    }, true, {})
    vim.fn.getchar()
    os.exit(1)
  end
end
vim.opt.rtp:prepend(lazypath)

-- Setup lazy.nvim
require("lazy").setup({
  spec = {
    -- import your plugins
    { import = "plugins" },
  },
  -- automatically check for plugin updates
  checker = { enabled = false },
})
#+END_SRC
* Colorscheme
** Install Colorschemes
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/colorscheme.lua

return {
    {
      "folke/tokyonight.nvim",
      lazy = false,
      priority = 1000,
      opts = {},
    },
    {
      "catppuccin/nvim",
	name = "catppuccin",
      lazy = false,
      priority = 1000,
      opts = {},
    },

}
#+END_SRC	
** Load colorscheme
#+BEGIN_SRC lua :tangle ~/.config/nvim/init.lua
vim.cmd.colorscheme "catppuccin-mocha"
--vim.cmd.colorscheme "tokyonight-night"
#+END_SRC
* Completions
** Autopairs
#+begin_src lua :tangle ~/.config/nvim/lua/plugins/autopairs.lua
return {
    "windwp/nvim-autopairs",
    event = "InsertEnter",
    config = true
}
#+end_src
** Snippets
Snippets to use for autocomplete
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/snippets.lua
return {
    { 
        "L3MON4D3/LuaSnip", event = "VeryLazy",
        dependencies = {
        {
            "rafamadriz/friendly-snippets",
            config = function()
              require("luasnip.loaders.from_vscode").lazy_load()
            end,
          },
        },
    },
}
#+END_SRC
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/config/snippets.lua
local ls = require "luasnip"

vim.snippet.expand = ls.lsp_expand

---@diagnostic disable-next-line: duplicate-set-field
vim.snippet.active = function(filter)
  filter = filter or {}
  filter.direction = filter.direction or 1

  if filter.direction == 1 then
    return ls.expand_or_jumpable()
  else
    return ls.jumpable(filter.direction)
  end
end

---@diagnostic disable-next-line: duplicate-set-field
vim.snippet.jump = function(direction)
  if direction == 1 then
    if ls.expandable() then
      return ls.expand_or_jump()
    else
      return ls.jumpable(1) and ls.jump(1)
    end
  else
    return ls.jumpable(-1) and ls.jump(-1)
  end
end

vim.snippet.stop = ls.unlink_current

-- ================================================
--      My Configuration
-- ================================================
ls.config.set_config {
  history = true,
  updateevents = "TextChanged,TextChangedI",
  override_builtin = true,
}

vim.keymap.set({ "i", "s" }, "<c-k>", function()
  return vim.snippet.active { direction = 1 } and vim.snippet.jump(1)
end, { silent = true })

vim.keymap.set({ "i", "s" }, "<c-j>", function()
  return vim.snippet.active { direction = -1 } and vim.snippet.jump(-1)
end, { silent = true })
#+END_SRC
** Autocomplete
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/completion.lua
return {
  {
    "hrsh7th/nvim-cmp",
    dependencies = {
      "onsails/lspkind.nvim",
      "hrsh7th/cmp-nvim-lsp",
      "hrsh7th/cmp-path",
      "hrsh7th/cmp-buffer",
      "L3MON4D3/LuaSnip",
      "saadparwaiz1/cmp_luasnip",
    },
    config = function()
      require "config.completion"
    end,
  },
}
#+END_SRC

Configuration options for the autocompletion:
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/config/completion.lua
require "config.snippets"

vim.opt.completeopt = { "menu", "menuone", "noselect" }

local lspkind = require "lspkind"
lspkind.init {}

local cmp = require("cmp")
local luasnip = require("luasnip")

cmp.setup {
  sources = {
    { name = "nvim_lsp" },
    { name = "luasnip" },
    { name = "path" },
    { name = "buffer" },
    { name = "orgmode" },
  },
  mapping = cmp.mapping.preset.insert ({
           ["<c-k>"] = cmp.mapping(function(fallback)
           if luasnip.expand_or_jumpable() then
             luasnip.expand_or_jump()
           else
             fallback()
           end
         end, { "i", "s" }),
         ["<c-e>"] = cmp.mapping.abort(),
         ["<CR>"] = cmp.mapping.confirm({ select=true }),
        }),
}

#+END_SRC
* UI
** Lualine
Preconfigured statusline
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/lualine.lua
return {
    {
        'nvim-lualine/lualine.nvim',
        dependencies = { 'nvim-tree/nvim-web-devicons' },
        config = function()
            require('lualine').setup()
        end,
    },
}
#+end_src
** Telescope
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/telescope.lua
return {
    { 
        "nvim-telescope/telescope.nvim",
        dependencies = { "nvim-lua/plenary.nvim" }
    },
}
#+END_SRC

* LSP
** LSP-Config
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/lspconfig.lua
return {
    "neovim/nvim-lspconfig",
    dependencies = {
        "williamboman/mason.nvim",
        "williamboman/mason-lspconfig.nvim"
    },
    opts = {
		inlay_hints = { enabled = true },
    },
  config = function()
    local capabilities = vim.lsp.protocol.make_client_capabilities()
    capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

    require('mason').setup()
    local mason_lspconfig = require 'mason-lspconfig'
    mason_lspconfig.setup {
        --ensure_installed = { "pyright", "marksman" }
       ensure_installed = { "pylsp", "marksman", "gopls", "rust_analyzer" }

    }
    --require("lspconfig").pyright.setup {
    --    capabilities = capabilities,
    --}
    require("lspconfig").pylsp.setup{
        settings ={
            pylsp = {
                plugins = {
                    pyflakes = { enabled = true,
                                 maxLineLength = 200},
                    black = { enabled = true },
                    pylsp_mypy = { enabled = true },
                    pycodestyle = {
			 maxLineLength = 200,
                    },
                    --jedi_completion = { fuzzy = true },
                }
            }
        }
    }

    require("lspconfig").gopls.setup{
	cmd = {'gopls'},
	-- for postfix snippets and analyzers
	capabilities = capabilities,
	    settings = {
	      gopls = {
		      experimentalPostfixCompletions = true,
		      analyses = {
		        unusedparams = true,
		        shadow = true,
		     },
		     staticcheck = true,
                   gofumpt = true,
                   usePlaceholders = true,
		    },
	    },
	on_attach = on_attach,
    }

    require'lspconfig'.rust_analyzer.setup {
    settings = {
        ['rust-analyzer'] = {
        cargo = {
          allFeatures = true,
          loadOutDirsFromCheck = true,
          buildScripts = {
            enable = true,
          },
        },
        -- Add clippy lints for Rust.
        checkOnSave = true,
        procMacro = {
          enable = true,
          ignored = {
            ["async-trait"] = { "async_trait" },
            ["napi-derive"] = { "napi" },
            ["async-recursion"] = { "async_recursion" },
          },        
	  },
    },
    }
    }

    require("lspconfig").marksman.setup {
        capabilities = capabilities,
    }
    require("lspconfig").rust_analyzer.setup {
        capabilities = capabilities,
    }
  end
}
#+END_SRC

** Treesitter
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/plugins/treesitter.lua
return {
    { 
        "nvim-treesitter/nvim-treesitter",
        version = false,
        config = function()
            require("nvim-treesitter.configs").setup({
                -- A list of parser names, or "all"
                ensure_installed = { 
                    "bash",
                    "c",
                    "diff",
                    "go",
                    "html",
                    "javascript",
                    "jsdoc",
                    "json",
                    "jsonc",
                    "lua",
                    "luadoc",
                    "luap",
                    "markdown",
                    "markdown_inline",
                    "python",
                    "query",
                    "regex",
		       "rust",
                    "toml",
                    "tsx",
                    "typescript",
                    "vim",
                    "vimdoc",
                    "yaml",
                },

                -- Install parsers synchronously (only applied to `ensure_installed`)
                sync_install = false,

                -- Automatically install missing parsers when entering buffer
                -- Recommendation: set to false if you don't have `tree-sitter` CLI installed locally
                auto_install = false,

                highlight = {
                    enable = true,
                    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
                    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
                    -- Using this option may slow down your editor, and you may see some duplicate highlights.
                    -- Instead of true it can also be a list of languages
                    additional_vim_regex_highlighting = false,
                  },

                  incremental_selection = {
                      enable = true,
                  }
            }
            )
        end,
    },
    -- Show context of the current function
    {
        "nvim-treesitter/nvim-treesitter-context",
        enabled = true,
        opts = { 
            mode = "cursor", 
            max_lines = 4,
            multiline_threshold = 2, -- Maximum number of lines to show for a single context
        },
    },
}
#+END_SRC
* Autocommands and functions
** Autocommands
Automatically change directory to opened file
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/config/autocommands.lua
 vim.api.nvim_create_autocmd(
     {"BufEnter"}, 
     { pattern = "*",    
     desc = "Automatically change directory to directory of current file",
     command = "cd %:p:h"
    }
 )

-- save the session on close
vim.api.nvim_create_autocmd("VimLeave", {
  callback = function()
      -- runs :mks! to save the session
  end,
})

vim.api.nvim_create_autocmd('LspAttach', {
  desc = 'LSP actions',
  callback = function(event)
    local bufmap = function(mode, lhs, rhs)
      local opts = {buffer = event.buf}
      vim.keymap.set(mode, lhs, rhs, opts)
    end

    -- You can find details of these function in the help page
    -- see for example, :help vim.lsp.buf.hover()

    -- Trigger code completion
    bufmap('i', '<C-Space>', '<C-x><C-o>')

    -- Display documentation of the symbol under the cursor
    bufmap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<cr>')

    -- Jump to the definition
    bufmap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<cr>')

    -- Jump to declaration
    bufmap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<cr>')

    -- Lists all the implementations for the symbol under the cursor
    bufmap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<cr>')

    -- Jumps to the definition of the type symbol
    bufmap('n', 'go', '<cmd>lua vim.lsp.buf.type_definition()<cr>')

    -- Lists all the references 
    bufmap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<cr>')

    -- Displays a function's signature information
    bufmap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<cr>')

    -- Renames all references to the symbol under the cursor
    bufmap('n', '<F2>', '<cmd>lua vim.lsp.buf.rename()<cr>')

    -- Format current file
    bufmap('n', '<F3>', '<cmd>lua vim.lsp.buf.format()<cr>')

    -- Selects a code action available at the current cursor position
    bufmap('n', '<F4>', '<cmd>lua vim.lsp.buf.code_action()<cr>')
  end
})
#+END_SRC
** Functions
#+begin_src lua :tangle ~/.config/nvim/lua/config/functions.lua
  -- Define an interactive vimgrep search function
function NompazVimgrepInFile()
    -- Prompt the user for a search term
    local search_term = vim.fn.input("Vimgrep Search: ")

    -- Check if the search term is not empty
    if search_term ~= "" then
        -- Run vimgrep on the current file
        vim.cmd("vimgrep /" .. search_term .. "/gj %")

        -- Open the quickfix list to display results
        vim.cmd("copen")
    else
        print("No search term entered.")
    end
end 
#+end_src
* Keymaps
Keymaps outside of which-key
#+BEGIN_SRC lua :tangle ~/.config/nvim/lua/config/keymaps.lua
local keymap = vim.api.nvim_set_keymap

--work with buffers
keymap("n", "<leader><tab>", "<cmd>Telescope buffers<cr>", { desc = "Switch buffer" })
keymap("n", "<c-w>k", "<cmd>bd<cr>", { desc = "Close buffer" })

--session management
-- save the last session
keymap("n", "<leader>ss", "<cmd>mks! ~/.local/share/nvim/session.vim<cr>", { desc = "Save current session to standard session file. Use mks! <file> to save session to a different file." })
-- load the last session
keymap("n", "<leader>sl", "<cmd>so ~/.local/share/nvim/session.vim<cr>", { desc = "Load current session to standard session file. Use so <file> to load differnt session from file" })

-- Telescope functions
-- find files
keymap("n", "<leader>ff", "<cmd>Telescope find_files<cr>", { desc = "Open file search" })
-- find in files
keymap("n", "<leader>fg", "<cmd>Telescope live_grep<cr>", { desc = "Search files (grep)" })
-- show recent files
keymap("n", "<leader>fr", "<cmd>Telescope oldfiles<cr>", { desc = "Show recent files" })

-- new file
keymap("n", "<leader>fn", "<cmd>ene <BAR> startinsert<cr>", { desc = "New file" })
-- show keymaps
keymap("n", "<leader>tk", "<cmd>Telescope keymaps<cr>", { desc = "Show keymaps" })

-- search
keymap("n", "<C-f>", "<cmd>lua NompazVimgrepInFile()<cr>", { desc = "Search string in file and display in quickfixlist" })


--navigate windows
--up
keymap("n", "<leader><Up>", "<cmd>wincmd k<cr>", { desc = "Move to window above" })
--down
keymap("n", "<leader><Down>", "<cmd>wincmd j<cr>", { desc = "Move to window below" })
--left
keymap("n", "<leader><Left>", "<cmd>wincmd h<cr>", { desc = "Move to left window" })
--right
keymap("n", "<leader><Right>", "<cmd>wincmd l<cr>", { desc = "Move to right window" })

--lsp
keymap("n", "<leader>gd", "<cmd>lua vim.lsp.buf.definition()<cr>", { desc = "LSP goto definition" })
keymap("n", "<leader>gD", "<cmd>lua vim.lsp.buf.references()<cr>", { desc = "LSP show references" })
keymap("n", "<leader>grn", "<cmd>lua vim.lsp.buf.rename()<cr>", { desc = "Rename all references in buffer" })
keymap("n", "<leader>ll", "<cmd>lua vim.diagnostic.setloclist()<cr>", { desc = "LSP show diagnostics" })

-- editor commands
keymap("n", "<A-Up>", "<cmd>m -2<cr>", { desc = "Move row 1 up" })
keymap("n", "<A-Down>", "<cmd>m +1<cr>", { desc = "Move row 1 down" })
keymap("x", "<A-Down>", "<cmd>'<,'>move-2<CR>gv=gv<cr>", { desc = "Move row 1 down" })
#+END_SRC
